#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var snap7 = require('./snap');
var debug = require('debug')('secondattempt:server');
var http = require('http');



var livingroombutton = 1;
var livingroomtvbutton = 1;
var kitchenbutton = 1;
var kitchensmallbutton = 1;
var bathroombutton = 1;
var bedroombutton = 1;
var hallbutton = 1;

//snap7.activityhandler(2);
console.log(snap7.PLCdata.output1);
snap7.activityhandler(3);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port',port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

}




io.on('connection', function(socket){
    console.log('a user connected');

    refreshbuttons();

    socket.on('livingroomstate', function(data) {
        //console.log(data);
        if (data == livingroombutton) {
        }else{
            //console.log("need to change LVRST");
            livingroombutton = data;
            refreshbuttons();
        }
    });
    socket.on('livingroomtvstate', function(data) {
        //console.log(data);
        if (data == livingroomtvbutton) {
        }else{
            //console.log("need to change LVRTVST");
            livingroomtvbutton = data;
            refreshbuttons();
        }
    });
    socket.on('kitchenstate', function(data) {
        //console.log(data);
        if (data == kitchenbutton) {
        }else{
            //console.log("need to change KITCH");
            kitchenbutton = data;
            refreshbuttons();
        }
    });
    socket.on('kitchensmallstate', function(data) {
        //console.log(data);
        if (data == kitchensmallbutton) {
        }else{
            //console.log("need to change KITCHSMST");
            kitchensmallbutton = data;
            refreshbuttons();
        }
    });
    socket.on('bathroomstate', function(data) {
        //console.log(data);
        if (data == bathroombutton) {
        }else{
            //console.log("need to change BAST");
            bathroombutton = data;
            refreshbuttons();
        }
    });
    socket.on('bedroomstate', function(data) {
        //console.log(data);
        if (data == bedroombutton) {
        }else{
            //console.log("need to change BEST");
            bedroombutton = data;
            refreshbuttons();
        }
    });
    socket.on('hallstate', function(data) {
        //console.log(data);
        if (data == hallbutton) {
        }else{
            //console.log("need to change HAST");
            hallbutton = data;
            refreshbuttons();
        }
    });

    var updateinterval = setInterval(function(){
        //socket.emit('fromserver',"interval");
        //socket.emit('askstates',"doit");
        //socket.broadcast.emit('PLCethernetconnectionstatus',"doit");
    },3000);


    socket.on('disconnect', function () {
        clearInterval(updateinterval);
        console.log('a user disconnected');
    });


    function refreshbuttons(){

        socket.broadcast.emit('PLClivingroom',livingroombutton);
        socket.broadcast.emit('PLClivingroomtv',livingroomtvbutton);
        socket.broadcast.emit('PLCkitchen',kitchenbutton);
        socket.broadcast.emit('PLCkitchensmall',kitchensmallbutton);
        socket.broadcast.emit('PLCbathroom',bathroombutton);
        socket.broadcast.emit('PLCbedroom',bedroombutton);
        socket.broadcast.emit('PLChall',hallbutton);

    }

});








